/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod ClipperLib {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub const ClipType_ctIntersection: root::ClipperLib::ClipType = 0;
        pub const ClipType_ctUnion: root::ClipperLib::ClipType = 1;
        pub const ClipType_ctDifference: root::ClipperLib::ClipType = 2;
        pub const ClipType_ctXor: root::ClipperLib::ClipType = 3;
        pub type ClipType = ::std::os::raw::c_uint;
        pub const PolyType_ptSubject: root::ClipperLib::PolyType = 0;
        pub const PolyType_ptClip: root::ClipperLib::PolyType = 1;
        pub type PolyType = ::std::os::raw::c_uint;
        pub type long64 = ::std::os::raw::c_longlong;
        pub const JoinType_jtSquare: root::ClipperLib::JoinType = 0;
        pub const JoinType_jtRound: root::ClipperLib::JoinType = 1;
        pub const JoinType_jtMiter: root::ClipperLib::JoinType = 2;
        pub type JoinType = ::std::os::raw::c_uint;
        pub const EndType_etClosedPolygon: root::ClipperLib::EndType = 0;
        pub const EndType_etClosedLine: root::ClipperLib::EndType = 1;
        pub const EndType_etOpenButt: root::ClipperLib::EndType = 2;
        pub const EndType_etOpenSquare: root::ClipperLib::EndType = 3;
        pub const EndType_etOpenRound: root::ClipperLib::EndType = 4;
        pub type EndType = ::std::os::raw::c_uint;
    }
    pub type path = *mut ::std::os::raw::c_void;
    pub type paths = *mut ::std::os::raw::c_void;
    pub type clipper = *mut ::std::os::raw::c_void;
    pub type clipperoffset = *mut ::std::os::raw::c_void;
    extern "C" {
        pub fn path_new(arg1: ::std::os::raw::c_int) -> root::path;
    }
    extern "C" {
        pub fn path_clear(arg1: root::path);
    }
    extern "C" {
        pub fn path_size(arg1: root::path) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn path_addPoint(
            arg1: root::path,
            arg2: root::ClipperLib::long64,
            arg3: root::ClipperLib::long64,
        );
    }
    extern "C" {
        pub fn path_getPointX(
            arg1: root::path,
            arg2: ::std::os::raw::c_int,
        ) -> root::ClipperLib::long64;
    }
    extern "C" {
        pub fn path_getPointY(
            arg1: root::path,
            arg2: ::std::os::raw::c_int,
        ) -> root::ClipperLib::long64;
    }
    extern "C" {
        pub fn path_free(arg1: root::path);
    }
    extern "C" {
        pub fn path_getArea(arg1: root::path) -> f64;
    }
    extern "C" {
        pub fn paths_new(arg1: ::std::os::raw::c_int) -> root::paths;
    }
    extern "C" {
        pub fn paths_clear(arg1: root::paths);
    }
    extern "C" {
        pub fn paths_size(arg1: root::paths) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn paths_getPath(arg1: root::paths, arg2: ::std::os::raw::c_int) -> root::path;
    }
    extern "C" {
        pub fn paths_addPath(arg1: root::paths, arg2: root::path);
    }
    extern "C" {
        pub fn paths_free(arg1: root::paths);
    }
    extern "C" {
        pub fn clipper_new() -> root::clipper;
    }
    extern "C" {
        pub fn clipper_addPath(
            arg1: root::clipper,
            arg2: root::path,
            arg3: root::ClipperLib::PolyType,
        );
    }
    extern "C" {
        pub fn clipper_addPaths(
            arg1: root::clipper,
            arg2: root::paths,
            arg3: root::ClipperLib::PolyType,
        );
    }
    extern "C" {
        pub fn clipper_execute(
            arg1: root::clipper,
            arg2: root::ClipperLib::ClipType,
            arg3: root::paths,
        );
    }
    extern "C" {
        pub fn clipper_free(arg1: root::clipper);
    }
    extern "C" {
        pub fn clipperoffset_new() -> root::clipper;
    }
    extern "C" {
        pub fn clipperoffset_setMiterLimit(c: root::clipperoffset, limit: f64);
    }
    extern "C" {
        pub fn clipperoffset_setArcTolerance(c: root::clipperoffset, tolerance: f64);
    }
    extern "C" {
        pub fn clipperoffset_addPath(
            c: root::clipperoffset,
            poly: root::path,
            jtype: root::ClipperLib::JoinType,
            etype: root::ClipperLib::EndType,
        );
    }
    extern "C" {
        pub fn clipperoffset_addPaths(
            c: root::clipperoffset,
            poly: root::paths,
            jtype: root::ClipperLib::JoinType,
            etype: root::ClipperLib::EndType,
        );
    }
    extern "C" {
        pub fn clipperoffset_execute(c: root::clipperoffset, solution: root::paths, delta: f64);
    }
    extern "C" {
        pub fn clipperoffset_free(c: root::clipperoffset);
    }
}
